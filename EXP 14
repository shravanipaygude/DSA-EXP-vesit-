#include <stdio.h>

// Function to display array
void display(int arr[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

//////////////////////////////////////////////
// ðŸ”¹ MERGE SORT FUNCTIONS
//////////////////////////////////////////////

void merge(int arr[], int low, int mid, int high) {
    int i = low, j = mid + 1, k = 0;
    int temp[high - low + 1];

    // Merge both halves into temp[]
    while (i <= mid && j <= high) {
        if (arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }

    // Copy remaining elements
    while (i <= mid)
        temp[k++] = arr[i++];
    while (j <= high)
        temp[k++] = arr[j++];

    // Copy sorted elements back to original array
    for (i = low, k = 0; i <= high; i++, k++)
        arr[i] = temp[k];
}

void mergeSort(int arr[], int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid + 1, high);
        merge(arr, low, mid, high);
    }
}

//////////////////////////////////////////////
// ðŸ”¹ QUICK SORT FUNCTIONS
//////////////////////////////////////////////

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    int temp;

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Swap pivot to correct position
    temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

//////////////////////////////////////////////
// ðŸ”¹ MAIN FUNCTION (Menu-driven)
//////////////////////////////////////////////

int main() {
    int arr[100], temp[100];
    int n, choice, i;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
        temp[i] = arr[i]; // Backup for resetting
    }

    while (1) {
        printf("\n===== MENU =====\n");
        printf("1. Merge Sort\n");
        printf("2. Quick Sort\n");
        printf("3. Display Original Array\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        // Reset array to original before each sort
        for (i = 0; i < n; i++)
            arr[i] = temp[i];

        switch (choice) {
            case 1:
                mergeSort(arr, 0, n - 1);
                printf("\nArray sorted using Merge Sort:\n");
                display(arr, n);
                break;

            case 2:
                quickSort(arr, 0, n - 1);
                printf("\nArray sorted using Quick Sort:\n");
                display(arr, n);
                break;

            case 3:
                printf("\nOriginal Array:\n");
                display(temp, n);
                break;

            case 4:
                printf("\nExiting...\n");
                return 0;

            default:
                printf("\nInvalid choice! Try again.\n");
        }
    }

    return 0;
}
