#include <stdio.h>
#define SIZE 5

int queue[SIZE];
int front = -1, rear = -1;

// Function to enqueue
void enqueue(int x) {
    if ((rear + 1) % SIZE == front) {
        printf("Queue Overflow (Full)\n");
    } else {
        if (front == -1) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % SIZE;
        }
        queue[rear] = x;
        printf("%d enqueued to queue\n", x);
    }
}

// Function to dequeue
void dequeue() {
    if (front == -1) {
        printf("Queue Underflow (Empty)\n");
    } else {
        printf("%d dequeued from queue\n", queue[front]);
        if (front == rear) {
            front = rear = -1; // Reset when empty
        } else {
            front = (front + 1) % SIZE;
        }
    }
}

// Function to peek
void peek() {
    if (front == -1) {
        printf("Queue is Empty\n");
    } else {
        printf("Front element is %d\n", queue[front]);
    }
}

// Function to display queue
void display() {
    if (front == -1) {
        printf("Queue is Empty\n");
    } else {
        printf("Queue elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

// Main function
int main() {
    int choice, value;
    do {
        printf("\n--- Circular Queue Menu ---\n");
        printf("1. Enqueue\n2. Dequeue\n3. Peek\n4. Display\n5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch(choice) {
            case 1:
                printf("Enter value to enqueue: ");
                scanf("%d", &value);
                enqueue(value);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                peek();
                break;
            case 4:
                display();
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    } while(choice != 5);
    
    return 0;
}
