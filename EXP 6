#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

/* ---------------- STACK IMPLEMENTATION ---------------- */
struct Node* top = NULL;

// Push
void push(int x) {
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = x;
    newNode->next = top;
    top = newNode;
    printf("%d pushed to stack\n", x);
}

// Pop
void pop() {
    if (top == NULL) {
        printf("Stack Underflow\n");
        return;
    }
    struct Node* temp = top;
    printf("%d popped from stack\n", top->data);
    top = top->next;
    free(temp);
}

// Peek
void peekStack() {
    if (top == NULL)
        printf("Stack is empty\n");
    else
        printf("Top element: %d\n", top->data);
}

/* ---------------- QUEUE IMPLEMENTATION ---------------- */
struct Node* front = NULL;
struct Node* rear = NULL;

// Enqueue
void enqueue(int x) {
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = x;
    newNode->next = NULL;
    if (rear == NULL) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
    printf("%d enqueued to queue\n", x);
}

// Dequeue
void dequeue() {
    if (front == NULL) {
        printf("Queue Underflow\n");
        return;
    }
    struct Node* temp = front;
    printf("%d dequeued from queue\n", front->data);
    front = front->next;
    if (front == NULL) rear = NULL;
    free(temp);
}

// Peek
void peekQueue() {
    if (front == NULL)
        printf("Queue is empty\n");
    else
        printf("Front element: %d\n", front->data);
}

/* ---------------- MAIN MENU ---------------- */
int main() {
    int choice, val;
    do {
        printf("\n--- Linked List Implementation ---\n");
        printf("1. Push (Stack)\n2. Pop (Stack)\n3. Peek (Stack)\n");
        printf("4. Enqueue (Queue)\n5. Dequeue (Queue)\n6. Peek (Queue)\n");
        printf("7. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1: printf("Enter value: "); scanf("%d", &val); push(val); break;
            case 2: pop(); break;
            case 3: peekStack(); break;
            case 4: printf("Enter value: "); scanf("%d", &val); enqueue(val); break;
            case 5: dequeue(); break;
            case 6: peekQueue(); break;
            case 7: printf("Exiting...\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while(choice != 7);

    return 0;
}
