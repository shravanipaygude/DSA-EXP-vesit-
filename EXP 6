#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Node structure
struct Node {
    char page[100];
    struct Node* next;
};

// Function to push (visit new page)
struct Node* push(struct Node* top, char* url) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    strcpy(newNode->page, url);
    newNode->next = top;
    printf("Visited: %s\n", url);
    return newNode;   // return new top
}

// Function to pop (back button)
struct Node* pop(struct Node* top) {
    if (top == NULL) {
        printf("No previous page! Stack is empty.\n");
        return NULL;
    }
    struct Node* temp = top;
    printf("Going back from: %s\n", temp->page);
    top = top->next;
    free(temp);
    return top;
}

// Function to display current page
void currentPage(struct Node* top) {
    if (top == NULL)
        printf("No page currently open.\n");
    else
        printf("Current page: %s\n", top->page);
}

// Function to display browsing history
void showHistory(struct Node* top) {
    if (top == NULL) {
        printf("No browsing history.\n");
        return;
    }
    printf("Browsing history (latest first):\n");
    struct Node* temp = top;
    while (temp != NULL) {
        printf("%s\n", temp->page);
        temp = temp->next;
    }
}

int main() {
    struct Node* top = NULL;  // stack top pointer
    int choice;
    char url[100];

    while (1) {
        printf("\n--- Browser Simulation (Stack using Linked List) ---\n");
        printf("1. Visit new page\n");
        printf("2. Back\n");
        printf("3. Current Page\n");
        printf("4. Show History\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // consume newline left by scanf

        switch (choice) {
            case 1:
                printf("Enter webpage URL: ");
                fgets(url, sizeof(url), stdin);
                url[strcspn(url, "\n")] = '\0';  // remove newline
                top = push(top, url);
                break;
            case 2:
                top = pop(top);
                break;
            case 3:
                currentPage(top);
                break;
            case 4:
                showHistory(top);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Node structure
struct Node {
    char name[50];         // customer name
    struct Node* next;
};

struct Node* front = NULL;
struct Node* rear = NULL;

// Function to enqueue (customer enters queue)
void enqueue(char* customer) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    strcpy(newNode->name, customer);
    newNode->next = NULL;

    if (rear == NULL) {
        front = rear = newNode;  // first customer
    } else {
        rear->next = newNode;
        rear = newNode;
    }
    printf("%s entered the queue.\n", customer);
}

// Function to dequeue (serve customer)
void dequeue() {
    if (front == NULL) {
        printf("No customers in queue. Counter is idle.\n");
        return;
    }
    struct Node* temp = front;
    printf("Serving customer: %s\n", front->name);
    front = front->next;
    if (front == NULL) rear = NULL;  // queue empty
    free(temp);
}

// Function to display queue (waiting customers)
void displayQueue() {
    if (front == NULL) {
        printf("No customers waiting in queue.\n");
        return;
    }
    printf("Customers waiting in queue: ");
    struct Node* temp = front;
    while (temp != NULL) {
        printf("%s ", temp->name);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int choice;
    char name[50];

    while (1) {
        printf("\n--- Ticket Counter Queue (Linked List Implementation) ---\n");
        printf("1. New Customer (Enqueue)\n");
        printf("2. Serve Customer (Dequeue)\n");
        printf("3. Show Waiting Queue\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // consume newline

        switch (choice) {
            case 1:
                printf("Enter customer name: ");
                fgets(name, sizeof(name), stdin);
                name[strcspn(name, "\n")] = '\0'; // remove newline
                enqueue(name);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                displayQueue();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
    return 0;
}
