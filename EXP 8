#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

struct Node* head = NULL;

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = newNode->prev = newNode; // circular links
    return newNode;
}

// Insert at beginning
void insertAtBeginning(int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* last = head->prev;
        newNode->next = head;
        newNode->prev = last;
        last->next = newNode;
        head->prev = newNode;
        head = newNode;
    }
    printf("%d inserted at beginning\n", data);
}

// Insert at end
void insertAtEnd(int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* last = head->prev;
        newNode->next = head;
        newNode->prev = last;
        last->next = newNode;
        head->prev = newNode;
    }
    printf("%d inserted at end\n", data);
}

// Delete a node by value
void deleteNode(int key) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* current = head;
    struct Node* prevNode = NULL;

    // Search for the node with the given key
    do {
        if (current->data == key)
            break;
        prevNode = current;
        current = current->next;
    } while (current != head);

    // Node not found
    if (current->data != key) {
        printf("Node with value %d not found.\n", key);
        return;
    }

    // Only one node in the list
    if (current->next == head && current->prev == head) {
        free(current);
        head = NULL;
        printf("Node with value %d deleted.\n", key);
        return;
    }

    // If node to be deleted is the head
    if (current == head) {
        struct Node* last = head->prev;
        head = head->next;
        last->next = head;
        head->prev = last;
        free(current);
        printf("Node with value %d deleted.\n", key);
        return;
    }

    // For any other node
    current->prev->next = current->next;
    current->next->prev = current->prev;
    free(current);
    printf("Node with value %d deleted.\n", key);
}

// Display list forward
void displayForward() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    printf("Circular Doubly Linked List (Forward): ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("\n");
}

// Display list backward
void displayBackward() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* last = head->prev;
    struct Node* temp = last;
    printf("Circular Doubly Linked List (Backward): ");
    do {
        printf("%d ", temp->data);
        temp = temp->prev;
    } while (temp != last);
    printf("\n");
}

// Main menu
int main() {
    int choice, data;

    while (1) {
        printf("\n--- Circular Doubly Linked List Menu ---\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Delete a Node\n");
        printf("4. Display Forward\n");
        printf("5. Display Backward\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                insertAtBeginning(data);
                break;
            case 2:
                printf("Enter data: ");
                scanf("%d", &data);
                insertAtEnd(data);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &data);
                deleteNode(data);
                break;
            case 4:
                displayForward();
                break;
            case 5:
                displayBackward();
                break;
            case 6:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
